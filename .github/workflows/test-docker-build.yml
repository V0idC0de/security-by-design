name: Docker Build Test

on:
  workflow_dispatch:
  push:
    paths:
      - "labs/**"
      - "demos/**"

jobs:
  changed-files:
    runs-on: ubuntu-24.04
    name: Find changed Environments
    outputs:
      matrix: ${{ steps.changed-labs.outputs.matrix || steps.all-dockerfiles.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@24d32ffd492484c1d75e0c0b894501ddb9d30d62
        with:
          dir_names: true
          dir_names_exclude_current_dir: true
          # Alias for "json: true" and "escape_json: false" for matrix use
          matrix: true

      - name: Find changed labs and demos directories
        id: changed-labs
        if: github.event_name != 'workflow_dispatch'
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_and_modified_files }}
        run: |
          # Parse the JSON array of changed files, truncate each path to two levels, deduplicate, and output as compact JSON.
          result="$(
            jq -c \
            '[.[] | split("/") | select(length >= 2) | .[0:2] | join("/") | select(startswith("labs/") or startswith("demos/"))] | unique' \
            <<< "$ALL_CHANGED_FILES"
          )"
          echo "matrix=$result" >> $GITHUB_OUTPUT

      - name: Find Dockerfile directories
        id: all-dockerfiles
        if: github.event_name == 'workflow_dispatch'
        run: |
          result="$(
            find labs demos -maxdepth 2 -type f -name Dockerfile \
            | xargs -n1 dirname \
            | sort -u \
            | jq -R -s -c 'split("\n")[:-1]'
          )"
          echo "matrix=$result" >> $GITHUB_OUTPUT

  build-docker-images:
    needs: changed-files
    name: Docker Build
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        dir: ${{ fromJson(needs.changed-files.outputs.matrix) }}
    env:
      IMAGE_NAME: test-image
    steps:
      - uses: actions/checkout@v5

      - name: Build Docker Image
        working-directory: ${{ matrix.dir }}
        run: |
          if [[ -f Dockerfile ]]; then
            docker build -t "$IMAGE_NAME" .
          else
            echo "ℹ️ No Dockerfile found in directory ${{ matrix.dir }} - skipping!"
          fi

      - name: Run Container
        run: |
          # --tty is important to simulate a input-terminal, so the Container does not exit immediately
          docker run --detach --tty "$IMAGE_NAME"
          sleep 3
          if [[ -z "$(docker ps --filter "status=running" --format '{{.Image}}')" ]]; then
            echo "❌ Container is no longer running after 3 seconds!"
            exit 1
          else
            echo "✅ Container is still running after 3 seconds - test succeeded!"
          fi
